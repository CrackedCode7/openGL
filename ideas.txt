Current item(s) to work on:
  
  - Chunks cull interior faces, except chunk borders. Also needs refactoring because lots of reused code

  - Work on chunk meshing and loading/unloading chunks efficiently. Store in memory
	chunks which are loaded, if you need to load one, try to from file first, then
	generate if needed. Test chunk generation time versus mesh time versus sending
	vertex data to shader time (per chunk vertices creation versus combining all
	chunks to one mesh)
	- Also need to efficiently and effectively draw rendered chunks based on where the
	data lies in the buffers, or have buffers for each, test these.

  - Make it so the buffer for the chunks is generated first, then use buffer sub data to set the vertices,
    and update the number of elements to draw.
    - Alternative could be to simply construct a mesh for each chunk in view, but this results in a lot 
      more OpenGL calls. For example, a buffer will be created and have to be destroyed whenever a chunk 
      is loaded/unloaded. This would work well with a better method of meshing (not just OpenGL culling)

  - Need to prevent the user from looking up or down past the flipping point. If we are within five degrees
    or something we need to prevent it from going further.
  
  - Will we need to "cull" interior faces preemptively, or let OpenGL cull all faces in loaded chunks?
    For example ignore everything behind you, ignore all interior faces (lots of calcs, may not be worth on cpu)

  - Lighting (based on minecraft, block level, sky level, greater is chosen)

Current method of polling for events can miss events. Need to switch the input handling to a callback in the future.